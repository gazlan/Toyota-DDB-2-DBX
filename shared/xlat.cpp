/* ******************************************************************** **
** uses pre-compiled headers
** ******************************************************************** */

#include "stdafx.h"

#include "xlat_tables.h"
#include "xlat.h"

/* ******************************************************************** **
** @@ internal defines
** ******************************************************************** */

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/* ******************************************************************** **
** @@ internal prototypes
** ******************************************************************** */

/* ******************************************************************** **
** @@ external global variables
** ******************************************************************** */

/* ******************************************************************** **
** @@ static global variables
** ******************************************************************** */
                  
/* ******************************************************************** **
** @@ real code
** ******************************************************************** */

extern const char XLAT_KOI8R_WIN1251[256] =
{
   '\x00', '\x01', '\x02', '\x03', '\x04', '\x05', '\x06', '\x07', '\x08', '\x09', '\x0A', '\x0B', '\x0C', '\x0D', '\x0E', '\x0F',
   '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17', '\x18', '\x19', '\x1A', '\x1B', '\x1C', '\x1D', '\x1E', '\x1F',
   '\x20', '\x21', '\x22', '\x23', '\x24', '\x25', '\x26', '\x27', '\x28', '\x29', '\x2A', '\x2B', '\x2C', '\x2D', '\x2E', '\x2F',
   '\x30', '\x31', '\x32', '\x33', '\x34', '\x35', '\x36', '\x37', '\x38', '\x39', '\x3A', '\x3B', '\x3C', '\x3D', '\x3E', '\x3F',
   '\x40', '\x41', '\x42', '\x43', '\x44', '\x45', '\x46', '\x47', '\x48', '\x49', '\x4A', '\x4B', '\x4C', '\x4D', '\x4E', '\x4F',
   '\x50', '\x51', '\x52', '\x53', '\x54', '\x55', '\x56', '\x57', '\x58', '\x59', '\x5A', '\x5B', '\x5C', '\x5D', '\x5E', '\x5F',
   '\x60', '\x61', '\x62', '\x63', '\x64', '\x65', '\x66', '\x67', '\x68', '\x69', '\x6A', '\x6B', '\x6C', '\x6D', '\x6E', '\x6F',
   '\x70', '\x71', '\x72', '\x73', '\x74', '\x75', '\x76', '\x77', '\x78', '\x79', '\x7A', '\x7B', '\x7C', '\x7D', '\x7E', '\x7F',
   '\x96', '\xA6', '\x2B', '\x2B', '\x2B', '\x2B', '\xA6', '\xA6', '\x96', '\x96', '\x2B', '\x7F', '\x7F', '\x7F', '\xA6', '\xA6',
   '\x7F', '\x7F', '\x7F', '\xAF', '\x88', '\x95', '\x3F', '\xA2', '\xBA', '\xAA', '\xA0', '\xBF', '\xB0', '\xA4', '\xB7', '\xA1',
   '\x3D', '\xA6', '\x2B', '\xB8', '\x2B', '\x2B', '\x2B', '\x2B', '\x2B', '\x2B', '\x2B', '\x2B', '\x2B', '\x2B', '\x2B', '\xA6',
   '\xA6', '\xA6', '\xA6', '\xA8', '\xA6', '\xA6', '\x3D', '\x96', '\x3D', '\x3D', '\x96', '\x3D', '\x2B', '\x2B', '\x2B', '\xB9',
   '\xFE', '\xE0', '\xE1', '\xF6', '\xE4', '\xE5', '\xF4', '\xE3', '\xF5', '\xE8', '\xE9', '\xEA', '\xEB', '\xEC', '\xED', '\xEE',
   '\xEF', '\xFF', '\xF0', '\xF1', '\xF2', '\xF3', '\xE6', '\xE2', '\xFC', '\xFB', '\xE7', '\xF8', '\xFD', '\xF9', '\xF7', '\xFA',
   '\xDE', '\xC0', '\xC1', '\xD6', '\xC4', '\xC5', '\xD4', '\xC3', '\xD5', '\xC8', '\xC9', '\xCA', '\xCB', '\xCC', '\xCD', '\xCE',
   '\xCF', '\xDF', '\xD0', '\xD1', '\xD2', '\xD3', '\xC6', '\xC2', '\xDC', '\xDB', '\xC7', '\xD8', '\xDD', '\xD9', '\xD7', '\xDA'
};

/* ******************************************************************** **
** @@ IsRussianLetter()
** @  Copyrt : 
** @  Author : 
** @  Modify :
** @  Update :
** @  Notes  :
** ******************************************************************** */

bool IsRussianLetter(int iChar)
{
   return XLAT_RUSSIAN_ANSI[(BYTE)iChar] != 0;
}

/* ******************************************************************** **
** @@ IsRussianVowels()
** @  Copyrt : 
** @  Author : 
** @  Modify :
** @  Update :
** @  Notes  :
** ******************************************************************** */

bool IsRussianMetatextVowels(int iChar)
{
   return XLAT_RUSSIAN_METATEXT_VOWELS_ANSI[(BYTE)iChar] != 0;
}

/* ******************************************************************** **
** @@ PackText20()
** @  Copyrt : 
** @  Author : 
** @  Modify :
** @  Update :
** @  Notes  :
** ******************************************************************** */

int PackRusText20
(
   const char* const       pszLastName,
   __int64&                iPart1,
   __int64&                iPart2
)
{
   iPart1 = 0;
   iPart2 = 0;

   if (!*pszLastName)
   {
      return 0;
   }

   int   iLen  = min(strlen(pszLastName),20);
   int   iLen1 = min(iLen,10);
   int   iLen2 = iLen - iLen1;

   for (int ii = 0; ii < iLen1; ++ ii)
   {
      iPart1 |= XLAT_PACKED_RUSSIAN_UPPERCASE_ANSI_6_BITS[(BYTE)pszLastName[ii]];
      iPart1  = iPart1 << 6;
   }

   for (ii = 0; ii < iLen2; ++ ii)
   {
      iPart2 |= XLAT_PACKED_RUSSIAN_UPPERCASE_ANSI_6_BITS[(BYTE)pszLastName[ii + 10]];
      iPart2  = iPart1 << 6;
   }

   return iLen;
}

/* ******************************************************************** **
** @@ XLAT()
** @  Copyrt : 
** @  Author : 
** @  Modify :
** @  Update :
** @  Notes  :
** ******************************************************************** */

void XLAT(char* pszText,DWORD dwSize,const BYTE* const pTable)
{
   for (DWORD ii = 0; ii < dwSize; ++ii)
   {
      pszText[ii] = pTable[(BYTE)pszText[ii]];
   }
}

/* ******************************************************************** **
** End of File
** ******************************************************************** */
